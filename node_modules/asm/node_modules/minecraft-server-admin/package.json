{
  "name": "minecraft-server-admin",
  "version": "0.2.0",
  "description": "API for managing a minecraft server instance",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dominicbarnes/node-minecraft-server-admin.git"
  },
  "keywords": [
    "minecraft",
    "server",
    "admin",
    "administration",
    "backups",
    "config"
  ],
  "author": {
    "name": "Dominic Barnes",
    "email": "dominic@dbarnes.info"
  },
  "license": "MIT",
  "dependencies": {
    "minecraft-runner": "~0.0.1",
    "async": "~0.1.22",
    "lodash": "~1.0.0",
    "file-class": "~0.1.2",
    "glob": "~3.1.14",
    "mkdirp": "~0.3.4",
    "minecraft-server-properties": "~0.0.0",
    "dir-backup": "~0.0.1",
    "rimraf": "~2.2.2"
  },
  "devDependencies": {
    "mocha": "~1.8.1",
    "request": "~2.12.0",
    "expect.js": "~0.2.0"
  },
  "readme": "# node-minecraft-server-admin\n\nThis module aims to encapsulate the management of a minecraft server, including\nspinning up game instances, running backup/restore operations,  getting/setting\nserver.properties, white-list.txt, banned-*.txt, etc data, and more as time goes\non.\n\n    npm install minecraft-server-admin\n\nThe export is a single constructor function:\n\n    var Server = require(\"minecraft-server-admin\");\n\n## High-Level Overview\n\nThis module is very opinionated, and creates it's directory structure in a very\nparticular way to encapsulate all server information into a single directory.\n(which is the dir supplied as the only argument to the Constructor function)\n\n * `backups/` - All server backups will reside here\n * `server/` - The minecraft server base dir will reside here (largely controlled by the minecraft server itself)\n    * `world/` - Usually, this is the server's world data (can be configured via `server.properties`)\n    * `minecraft_server.jar` - This is a symbolic link pointing to a `minecraft_server.jar` somewhere else on disk.\n    * `banned-ips.txt` - Banned IP addresses\n    * `banned-players.txt` - Banned player usernames\n    * `white-list.txt` - Server whitelist (must be enabled in `server.properties`)\n    * `opts.txt` - Server operator list\n    * `server.properties` - See the [Minecraft Wiki](http://www.minecraftwiki.net/wiki/Server.properties)\n    * `server.log` - Server console/log output\n * `config.json` - This contains configuration details for the server that exist outside the `server.properties`\n   and friends. (such as the `java` command, allowed RAM, etc)\n\n## API Documentation\n\n### Server(dir)\n\nThe constructor requires a base directory as it's only parameter, this will be\nthe root directory for all the server's data/configuration/etc.\n\n**Arguments**\n\n * `dir` - The path to the server's location on disk\n\n### Server#dir\n\nThe absolute path location for this server, set by the `Constructor` (see above)\n\n### Server#log\n\nAn instance of `file-class.File` (see [file-class](https://github.com/dominicbarnes/node-file-class))\npointing to `server/server.log`.\n\n### Server#config\n\nAn instance of `file-class.JSONFile` (see [file-class](https://github.com/dominicbarnes/node-file-class))\npointing to `config.json`.\n\n### Server#properties\n\nAn instance of `file-class.File` (see [file-class](https://github.com/dominicbarnes/node-file-class))\n(using parse/stringify methods from [node-minecraft-server-properties](https://github.com/dominicbarnes/node-minecraft-server-properties))\npointing to [`server/server.properties`](http://www.minecraftwiki.net/wiki/Server.properties)\n\n### Server#whitelist\n\nAn instance of `file-class.ListFile` (see [file-class](https://github.com/dominicbarnes/node-file-class))\npointing to `server/white-list.txt`.\n\n### Server#operators\n\nAn instance of `file-class.ListFile` (see [file-class](https://github.com/dominicbarnes/node-file-class))\npointing to `server/ops.txt`.\n\n### Server#banned.ips\n\nAn instance of `file-class.ListFile` (see [file-class](https://github.com/dominicbarnes/node-file-class))\npointing to `server/banned-ips.txt`.\n\n### Server#banned.players\n\nAn instance of `file-class.ListFile` (see [file-class](https://github.com/dominicbarnes/node-file-class))\npointing to `server/banned-players.txt`.\n\n### Server#backups\n\nAn instance of `dir-backup` (see [node-dir-backup](https://github.com/dominicbarnes/node-dir-backup))\nthat sets up a backup system with the `server/` dir as the source, and `backups/`\nas the target.\n\n### Server#game\n\nThis property is only set after a game has been started and begins to run\nsuccessfully, it is an instance of the\n[node-minecraft-runner](https://github.com/dominicbarnes/node-minecraft-runner)\nobject, and exposes that entire API via this property. (this includes execute\nserver commands on the console, allows for listening to events that the server\nemits, etc)\n\n### Server#status\n\nThis is a `String` property that returns the current status of the running game,\nor `\"Stopped\"` if no game is running.\n\n### Server#jar\n\nThis is the filesystem location of the server's jar file, not following the symbolic link.\n(ie: `server/minecraft_server.jar`)\n\n### Server#file(location)\n\nThis function returns the absolute path to a file within the server's directory.\n\n**Arguments**\n\n * `location` - The relative location of the file\n\n**Returns** `String`\n\n### Server#create(options, callback)\n\nThis creates the entire directory structure for a server, additional data passed\nvia arguments will be passed off to various other methods to creating configuration\nfiles (such as `server.properties`)\n\n**Arguments**\n\n * `options` - Hash of data for server defaults\n    * `config` - `config.json` data (ie: `java`, `ram`)\n    * `properties` - `server/server.properties` data\n    * `whitelist` - `server/white-list.txt` data\n    * `ops` - `server/ops.txt` data\n    * `bannedPlayers` - `server/banned-players.txt` data\n    * `bannedIps` - `server/banned-ips.txt` data\n    * `jar` - `server/minecraft_server.jar` source location\n * `callback` - Arguments provided:\n    * `err` - Error object (if relevent)\n\n```javascript\nvar options = {\n    properties: {\n        // ... any excluded properties will likely be given defaults by the server\n        \"white-list\": true\n    },\n    ops: [ \"the-op\" ]\n};\n\nserver.create(options, function (err) {\n    // err => null or Error()\n});\n```\n\n### Server#del(callback)\n\nThis will destroy the entire directory structure for the server, if a game is\ncurrently running, it will stop that instance first.\n\n**Arguments**\n\n * `callback` - Arguments provided:\n    * `err` Error object (if relevent)\n\n### Server#exists(callback)\n\nThis will check for the existence of the server specified by this object.\n\n**Arguments**\n\n * `callback` - Arguments provided:\n    * `exists` - `Boolean` indicating the existence of the server's root dir\n\n### Server#banned(callback)\n\nThis method is short-hand for reading both `banned-ips.txt` and `banned-players.txt`.\n\n**Arguments**\n\n * `callback` - Arguments provided:\n    * `err` - Error object (if relevent)\n    * `banned` - `Object` of banned players/ips\n\n### Server#nukeWorld(callback)\n\nThis method destroys the world data. (ie: the dir specified by the `level-name`\nproperty in `server.properties`) This is a nice way to give your world a clean\nslate without needing to reconfigure the entire server.\n\n**Arguments**\n\n * `callback` - Arguments provided:\n    * `err` - Error object (if relevent)\n\n### Server#linkJar(location, callback)\n\nThis method creates a symbolic link at `server/minecraft_server.jar` pointing\nto the `location` specified.\n\n**Arguments**\n\n * `location` - The absolute path to a valid `minecraft_server.jar` file\n * `callback` - Arguments provided:\n    * `err` - Error object (if relevent)\n\n### Server#downloadJar(url, callback)\n\nThis method downloads the file located at the specified `url` via HTTP\nto `server/minecraft_server.jar`.\n\n**Arguments**\n\n * `url` - The url pointing to a valid `minecraft_server.jar`\n * `callback` - Arguments provided:\n    * `err` - Error object (if relevent)\n\n### Server#start(callback)\n\nThis method will start the server instance, when the server has started properly,\nit will set the `Server#game` property with the\n[node-minecraft-runner](https://github.com/dominicbarnes/node-minecraft-runner)\ninstance object.\n\n**Arguments**\n\n * `callback` - Arguments provided:\n    * `err` - Error object (if relevent)\n\n### Server#stop(callback)\n\nThis method will stop the server instance, once the server stops/exits, the\n`Server#game` property will be deleted.\n\n**Arguments**\n\n * `callback` - Arguments provided:\n    * `err` - Error object (if relevent)\n\n### Server#restart(callback)\n\nThis is short-hand for stopping and starting the server, any errors encountered\nby either will be passed to the callback.\n\n**Arguments**\n\n * `callback` - Arguments provided:\n    * `err` - Error object (if relevent)\n\n### Server#backup(callback)\n\nThis method handles running a backup for the server's `server/` directory. (to\nexclude the backups themselves from being part of the backup) This method also\nhandles the necessary steps to take if the server is actively running, such as\nbroadcasting a message to the current users, forcing the server to flush data to\ndisk, etc.\n\n**Arguments**\n\n * `callback` - Arguments provided:\n    * `err` - Error object (if relevent)\n    * `timestamp` - `Date` reflecting the time of the backup itself\n\n### Server#restore(timestamp, callback)\n\nThis method restores a server from a previously-run backup. Unlike `Server#backup()`,\nit **cannot** be run while the server is still actively running.\n\n**Arguments**\n\n * `callback` - Arguments provided:\n    * `err` - Error object (if relevent)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dominicbarnes/node-minecraft-server-admin/issues"
  },
  "_id": "minecraft-server-admin@0.2.0",
  "dist": {
    "shasum": "81ea66657200378b8b81e56a1838c30868303242",
    "tarball": "http://registry.npmjs.org/minecraft-server-admin/-/minecraft-server-admin-0.2.0.tgz"
  },
  "_from": "minecraft-server-admin@latest",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "dominicbarnes",
    "email": "contact@dominicbarnes.us"
  },
  "maintainers": [
    {
      "name": "dominicbarnes",
      "email": "contact@dominicbarnes.us"
    }
  ],
  "_shasum": "81ea66657200378b8b81e56a1838c30868303242",
  "_resolved": "https://registry.npmjs.org/minecraft-server-admin/-/minecraft-server-admin-0.2.0.tgz",
  "homepage": "https://github.com/dominicbarnes/node-minecraft-server-admin#readme"
}
