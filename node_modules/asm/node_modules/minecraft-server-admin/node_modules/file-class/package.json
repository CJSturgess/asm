{
  "name": "file-class",
  "version": "0.1.3",
  "description": "Object-oriented API for interacting with files",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": "",
  "keywords": [
    "fs",
    "file",
    "filesystem",
    "class",
    "oop",
    "object-oriented"
  ],
  "author": {
    "name": "Dominic Barnes",
    "email": "dominic@dbarnes.info"
  },
  "license": "MIT",
  "dependencies": {
    "mkdirp": "~0.3.5",
    "extend": "~1.1.3"
  },
  "devDependencies": {
    "mocha": "~1.8.1",
    "should": "~1.2.1"
  },
  "readme": "# node-file-class\n\nObject-oriented API for interacting with files in node.js\n\n    npm install file-class\n\nInclude in your project, the export is a single constructor function\n\n    var File = require(\"file-class\");\n\n## API Documentation\n\n### File(location, [options]) <small>constructor</small>\n\nThe constructor will create an object representing a file on disk.\n\n**Arguments**\n\n * location - The location/path to file on disk (absolute is likely preferred)\n * options - A hash of additional properties for the object (just extended to this)\n    * encoding - The encoding for the file (default: `\"utf8\"`)\n    * parse - A function to parse a file body (default: `null`)\n    * stringify - A function to encode data into a file body (default: `null`)\n\n```javascript\nvar file = new File(\"foo.txt\");\n\n// or\n\nvar file = new File(\"foo.conf\", {\n    encoding:  \"utf8\",\n    parse:     function (input) { /* parse and return output */ },\n    stringify: function (input) { /* transform and return output */ }\n});\n\n// or even\n\nvar file = new File(\"my-file\");\n\nfile.encoding = \"binary\"; // can set properties after initialization\n```\n\n### File#read(callback)\n\nRead the entire contents of the file (via `fs.readFile()`) and return in a callback.\n\n**Arguments**\n\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n    * contents - The entire contents of the file\n\n```javascript\nfile.read(function (err, contents) {\n    // err => null or Error()\n    // contents => string of contents (or buffer in encoding is not utf8)\n});\n```\n\n### File#mkdir(callback)\n\nCreate the entire directory tree for this file (via [`mkdirp`](https://npmjs.org/package/mkdirp))\n\n**Arguments**\n\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n\n```javascript\nfile.mkdir(function (err) {\n    // err => null or Error()\n});\n```\n\n### File#write(contents, callback)\n\nWrite `contents` to the file (via `fs.writeFile()`)\n\n**Arguments**\n\n * contents - The data to be written to the file\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n\n```javascript\nfile.write(\"FOO\", function (err) {\n    // err => null or Error()\n});\n```\n\n### File#empty(callback)\n\nClear the contents of the file (ie. `file.write(`\"\"`, ...)`)\n\n**Arguments**\n\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n\n```javascript\nfile.empty(function (err) {\n    // err => null or Error()\n});\n```\n\n### File#unlink(callback) <small>*Alias*: del</small>\n\nDelete the file from the filesystem (via `fs.unlink(...)`).\n\n**Arguments**\n\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n\n```javascript\nfile.unlink(function (err) {\n    // err => null or Error()\n});\n```\n\n### File#exists(callback)\n\nCheck for this file's existence (via `fs.exists(...)`).\n\n**Arguments**\n\n * callback - Arguments provided:\n    * exists - `true`/`false`\n\n```javascript\nfile.exists(function (exists) {\n    // exists => true/false\n});\n```\n\n### File#stat(callback)\n\nGet a `fs.Stats` object for the file (via `fs.stat(...)`).\n\n**Arguments**\n\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n    * stats - fs.Stats object\n\n```javascript\nfile.stat(function (err, stats) {\n    // err => null or Error()\n    // stats => fs.Stats object\n});\n```\n\n----\n\n### File.JSONFile(location, [options]) <small>constructor</small>\n\nThe constructor will create an object representing a JSON file on disk. This object exposes helper methods for dealing with JSON.\n\n**Arguments**\n\n * location - same as `File`\n * options - same as `File`, with some additions:\n    * replacer - A replacer function: see [JSON.stringify](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify) (default: `null`)\n    * spaces - Number of spaces to use in output: see [JSON.stringify](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify) (default: `null`)\n\n```javascript\nvar json = new File.JSONFile(\"package.json\");\n\njson.read(function (err, json) {\n   // json => parsed JSON object for file\n});\n```\n\n### File.JSONFile#merge(data, callback)\n\nReads the file, uses [`extend`](https://npmjs.org/package/extend) to merge the data in before writing.\n\n**Arguments**\n\n * data - The object of data to merge\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n    * contents - The contents as they were written\n\n```javascript\njson.merge({ foo: \"bar\" }, function (err, contents) {\n    // err => null or Error()\n    // contents => final state of file contents\n});\n```\n\n----\n\n### File.ListFile(location, [options]) <small>constructor</small>\n\nThe constructor will create an object representing a file on disk whose contents\nare comprised of one item per-line. This object exposes helper methods for\ndealing with that collection.\n\n**Arguments**\n\n * location - same as `File`\n * options\n    * ignore - `String`, `RegExp`, `Function`\n\n```javascript\nvar list = new File.ListFile(\"banned.txt\");\n\nlist.read(function (err, users) {\n   // users => array of users (one per line of file)\n});\n```\n\n### File.ListFile#ignore\n\nThis property can be added via the `options` object in the constructor, or can\nbe set manually as an object property.\n\nIf a `String`, any line beginning with that same string will be ignored.\n\nIf a `RegExp`, any line that matches the regular expression will be ignored.\n\nIf a `Function`, any line that returns `true` when executing the function will be ignored.\n\n**NOTE** Empty lines (this includes lines that consist only of whitespace) are always ignored.\n\n```javascript\n\nvar list = new File.ListFile(\"banned.txt\", { ignore: \"#\" });\n\n// or perhaps\nlist.ignore = /^#/;\n\n// or even\nlist.ignore = function (line) {\n    return line[0] === \"#\";\n};\n\nlist.read(function (err, users) {\n    // users => will exclude entries that begin with a '#' character\n    //          any of the above methods yield the same result in this case\n});\n```\n\n\n### File.ListFile#indexOf(item, callback)\n\nDetermine the index of the item specified in the collection.\n\n**Arguments**\n\n * item - The item to check\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n    * index - The 0-indexed line number for that item (-1 if not found)\n    * list - The complete list (via `this.read(...)`)\n\n```javascript\nlist.indexOf(\"hello world\", function (err, index, list) {\n    // err => null or Error()\n    // index => -1 or index in array\n    // list => the list that was read from disk\n});\n```\n\n### File.ListFile#contains(item, callback)\n\nDetermine whether or not an item is in the collection at all.\n\n**Arguments**\n\n * item - The item to check\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n    * contains - `true`/`false`\n    * list - The complete list (via `this.read(...)`)\n\n```javascript\nlist.contains(\"hello world\", function (err, contains, list) {\n    // err => null or Error()\n    // contains => -1 or index in array\n    // list => the list that was read from disk\n});\n```\n\n### File.ListFile#add(item, callback)\n\nAdd a new item to the collection.\n\n**Arguments**\n\n * item - The item to add\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n\n```javascript\nlist.add(\"hello world\", function (err) {\n    // err => null or Error()\n});\n```\n\n### File.ListFile#remove(item, callback)\n\nRemove an item from the collection. (either by value, or index)\n\n**Notice:** this will only remove the first occurence, even if the value occurs multiple times in the file.\n\n**Arguments**\n\n * item - The item to remove (`Number`: will remove that line via index. `String`: will call `this.indexOf()` to determine which line to remove)\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n\n```javascript\nlist.add(\"hello world\", function (err) {\n    // err => null or Error()\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "file-class@0.1.3",
  "dist": {
    "shasum": "0efd9c48078ed663d22b637129c547d736aeb91b",
    "tarball": "http://registry.npmjs.org/file-class/-/file-class-0.1.3.tgz"
  },
  "_from": "file-class@>=0.1.2 <0.2.0",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "dominicbarnes",
    "email": "contact@dominicbarnes.us"
  },
  "maintainers": [
    {
      "name": "dominicbarnes",
      "email": "contact@dominicbarnes.us"
    }
  ],
  "directories": {},
  "_shasum": "0efd9c48078ed663d22b637129c547d736aeb91b",
  "_resolved": "https://registry.npmjs.org/file-class/-/file-class-0.1.3.tgz"
}
