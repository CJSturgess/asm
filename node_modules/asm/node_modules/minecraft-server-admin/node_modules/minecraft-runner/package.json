{
  "name": "minecraft-runner",
  "version": "0.0.4",
  "description": "A node module meant to manage a minecraft server instance",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dominicbarnes/node-minecraft-runner.git"
  },
  "keywords": [
    "minecraft",
    "server",
    "game",
    "runner",
    "events"
  ],
  "author": {
    "name": "Dominic Barnes",
    "email": "dominic@dbarnes.info"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.8.1",
    "should": "~1.2.1",
    "mkdirp": "~0.3.5",
    "rimraf": "~2.2.2"
  },
  "dependencies": {
    "lodash": "~1.0"
  },
  "readme": "# node-minecraft-runner\n\nAn API for running minecraft server instances. It also monitors the server for\nparticular events and emits them in ways that you can use in your application.\nFor example, it will emit a `joined` event when a player joins the server.\n\n    npm install minecraft-runner\n\nInclude in your project, the export is a single constructor function\n\n```javascript\nvar Game = require(\"minecraft-runner\");\n```\n\n## Usage\n\n### Game(dir, jar, [options])\n\nThe constructor will create an object representing a file on disk.\n\n**Arguments**\n\n * dir - The path to the root folder for the server (the dir with server.properties)\n * jar - The path to `minecraft_server.jar`\n * options - A hash of additional properties for the object (just extended to this)\n    * java - The path to the `java` executable (default: `\"java\"`)\n    * ram - The java command arguments: `-Xms{ram} -Xmx{ram}` (default: `\"1G\"`)\n\n```javascript\nvar game = new Game(\"/path/to/server\", \"/path/to/jar\");\n```\n\n### Game#start(callback)\n\nStartup the server instance. The callback is executed once the server reports\nit has finished starting.\n\n**Arguments**\n\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n    * proc - The object returned by `child_process.spawn()`\n\n```javascript\ngame.start(function (err, proc) {\n    // err => null or Error()\n    // proc => spawned process object, same as this.process\n});\n```\n\n### Game#stop(callback)\n\nStops the server instance. The callback is executed once the process exits.\n(ie: when the server finishes shutting down)\n\n**Arguments**\n\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n\n```javascript\ngame.stop(function (err) {\n    // err => null or Error()\n});\n```\n\n### Game#restart(callback)\n\nRestarts the server instance. (ie. calls `stop()`, then `start()` in succession)\n\n**Arguments**\n\n * callback - Arguments provided:\n    * err - Error object (if relevent)\n    * proc - The object returned by `child_process.spawn()`\n\n```javascript\ngame.restart(function (err, proc) {\n    // err => null or Error()\n    // proc => spawned process object, same as this.process\n});\n```\n\n### Game#command(...cmd)\n\nIssues a [command](http://www.minecraftwiki.net/wiki/Command) to the server.\nAll the arguments to the function are joined with a space.\n\n**Arguments**\n\n * ...cmd All the parts of the command to be made of the server\n\n```javascript\n// broadcast \"Hello World\" to all players on the server\ngame.command(\"say\", \"Hello World\");\n\n// say \"Hello\" to only player testuser\ngame.command(\"tell\", \"testuser\", \"Hello\");\n```\n\n### Game#say(msg)\n\nShort-hand for `game.command(\"say\", msg);`\n\n**Arguments**\n\n * msg Message to be broadcast to all players on server\n\n```javascript\ngame.say(\"Hello World!\");\n```\n\n## Events\n\n - **start** - emitted before a server has started\n - **started** - emitted after a server has finished starting\n - **stop** - emitted before stopping the server\n - **stopped** - emitted after the server has finished stopping\n - **error (err)** - triggered by an error in the server (via log) or from a java exception\n - **java (msg)** - a java exception (usually outside the minecraft game itself)\n - **log (meta)** - emitted any time a log is detected from the server\n - **version (name)** - emitted when the server reports the version of the jar being used\n - **joined (name, details)** - emitted after a player joins the server\n - **left (name, reason)** - emitted after a player leaves the server\n - **saveoff** - emitted after the server reports it has stopped auto-saving (in response to `save-off` command)\n - **saveon** - emitted after the server reports it has resumed auto-saving (in response to `save-on` command)\n - **saved** - emitted after the server reports it has finished saving (in response to `save-all` command)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dominicbarnes/node-minecraft-runner/issues"
  },
  "_id": "minecraft-runner@0.0.4",
  "dist": {
    "shasum": "2116d7fff5a8d2748a6476ec0707674bb1d32b24",
    "tarball": "http://registry.npmjs.org/minecraft-runner/-/minecraft-runner-0.0.4.tgz"
  },
  "_from": "minecraft-runner@>=0.0.1 <0.1.0",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "dominicbarnes",
    "email": "contact@dominicbarnes.us"
  },
  "maintainers": [
    {
      "name": "dominicbarnes",
      "email": "contact@dominicbarnes.us"
    }
  ],
  "directories": {},
  "_shasum": "2116d7fff5a8d2748a6476ec0707674bb1d32b24",
  "_resolved": "https://registry.npmjs.org/minecraft-runner/-/minecraft-runner-0.0.4.tgz",
  "homepage": "https://github.com/dominicbarnes/node-minecraft-runner#readme"
}
