var asm = require('../asm'),
    path = require('path'),
    url = require('url'),
    fs = require('fs');

asm.serve.backups = function(token, app) {
    return new Promise(function (resolve, reject) {
        var backups = path.join(asm.server.dir, "backups");
        app.get('/backups', function(req, res) {
            var query = url.parse(req.url, true).query;
            if (query.token == "" || query.token != token) {
                console.log("[serve.backups] An attempt to view backups was denied due to an invalid token.".red);
                res.send('{"err": "Invalid token."}');
            } else {
                var backupArray = [];
                fs.readdir(backups, function(err, files) {
                    if (err) {
                        console.log("[serve.backups] Error while crawling backups directory.".red);
                    } else {
                        for (var i = 0; i < files.length; ++i) {
                            var file = files[i];
                            file = file.replace("world-", '');
                            file = file.replace(".tar.gz", '');
                            backupArray[i] = file;
                            if (i == files.length - 1) {
                                res.send(JSON.stringify(backupArray));
                            }
                        }
                    }
                });
            }
        });
        
        app.get('/backup/:timestamp', function(req, res) {
            var query = url.parse(req.url, true).query;
            var timestamp = req.params.timestamp;
            if (query.token == "" || query.token != token) {
                console.log("[serve.backups] An attempt to download a backup was denied due to an invalid token.".red);
                res.send('{"err": "Invalid token."}');
            } else {
                var filename = "world-" + timestamp + ".tar.gz";
                var file = path.join(asm.server.dir, "backups", filename);
                fs.stat(file, function(err, stats) {
                    if (err) {
                        console.log("[serve.backups] An error occurred while checking a backup.".red);
                    } else {
                        if (stats.isFile()) {
                            res.download(file, filename);
                        } else {
                            res.send('{"err": "Backup not found."}');
                        }
                    }
                });
            }
        });
        
        console.log("[serve.backups] Ready to serve backups!".green);
        resolve(app);
    });
}