var asm = require('../asm'),
    url = require('url');

asm.serve.endpoints = function(token, app) {
    return new Promise(function(resolve, reject) {
        app.get('/func/:do', function(req, res) {
            var query = url.parse(req.url, true).query;
            var func = req.params.do;
            if (query.token == "" || query.token != token) {
                console.log("[serve.endpoints] An attempt to execute ".red + func.toString().red + " was denied due to an invalid token.".red);
                res.send('{"err": "Invalid token."}');
            } else {
                if (func == "start") {
                    if (asm.server.running) {
                        res.send('{"err": "Server already running."}');
                    } else {
                        console.log("[serve.endpoints] Starting server via remote.".green);
                        asm.startServer().then(function(err) {
                            if (err) {
                                res.send('{"err": "' + err + '"}');
                            } else {
                                res.send('{"err": null}');
                            }
                        });
                    }
                } else if (func == "stop") {
                    if (!asm.server.running) {
                        res.send('{"err": "Server already stopped."}');
                    } else {
                        console.log("[serve.endpoints] Stopping server via remote.".green);
                        asm.stopServer().then(function(err) {
                            if (err) {
                                res.send('{"err": "' + err + '"}');
                            } else {
                                res.send('{"err": null}');
                            }
                        });
                    }
                } else if (func == "restart") {
                    if (!asm.server.running) {
                        res.send('{"err": "Server already stopped."}');
                    } else {
                        console.log("[serve.endpoints] Restarting server via remote.".green);
                        asm.restartServer().then(function(err) {
                            if (err) {
                                res.send('{"err": "' + err + '"}');
                            } else {
                                res.send('{"err": null}');
                            }
                        });
                    }
                } else if (func == "backup") {
                    if (asm.server.running) {
                        res.send('{"err": "Server must be offline to take a backup."}');
                    } else {
                        console.log("[serve.endpoints] Backing up server via remote.".green);
                        asm.backupServer().then(function(err) {
                            if (err) {
                                res.send('{"err": "' + err + '"}');
                            } else {
                                res.send('{"err": null}');
                            }
                        });
                    }
                } else {
                    res.send('{"err": "Invalid function."}');
                }
            }
        });
        
        app.get('/func/command/:arg', function(req, res) {
            var query = url.parse(req.url, true).query;
            var arg = req.params.arg;
            if (query.token == "" || query.token != token) {
                console.log("[serve.endpoints] An attempt to execute command was denied due to an invalid token.".red);
                res.send('{"err": "Invalid token."}');
            } else {
                if (!asm.server.running) {
                    res.send('{"err": "Server not running."}');
                } else {
                    if (!arg) {
                        res.send('{"err": "No argument passed."}');
                    } else {
                        console.log("[serve.endpoints] Executing command via remote.".green);
                        asm.server.game.command(arg);
                        res.send('{"err": null}');
                    }
                }
            }
        });
        
        console.log("[serve.endpoints] Ready to serve endpoints!".green);
        resolve(app);
    });
};